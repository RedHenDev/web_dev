<canvas id="mom" width="256" height="256"></canvas>

<script>

//*********************************
let _dir="_";
document.addEventListener('keydown', (event) => {
	//let name = event.key;
	let code = event.code;
	//render(code);
	_dir=code;
	// My first template literal.
	//alert(`Key pressed ${name} \r\n Key code value: ${code}`);
},false);
//*********************************
	
let width=256;
let height=256;
let demiWidth=width*0.5;
let demiHeight=height*0.5;
let zoomFactor=1.01;
// RGB multipliers.
let rMult=1.25;
let gMult=3;
let bMult=1.5;
// Steering strength.
let steer=0.001;
let cellStep=2;
	
let m = document.getElementById("mom").getContext("2d");

Atom = function(x,y,c){
		m.fillStyle=c;
		m.fillRect(x,y,cellStep,cellStep);
		}

let zoomX=12;
let zoomY=12;
//let xOff=0.12;
//let yOff=0.86;
let xOff=0;
let yOff=0;

setInterval(render,1000/30);

render();

function render(){
//console.log(_dir);
m.clearRect(0,0,width+1,height+1);
zoomX*=zoomFactor;
zoomY*=zoomFactor;
	
// For steering.
let dirX=0;
let dirY=0;
	
if (_dir==="ArrowUp" || _dir==="KeyW"){
		dirY=steer;}
else if (_dir==="ArrowDown" || _dir==="KeyS"){
		dirY=-steer;}
else if (_dir==="ArrowRight" || _dir==="KeyD"){
		dirX=-steer;}
else if (_dir==="ArrowLeft" || _dir==="KeyA"){
		dirX=steer;}

// Steer strength relative to current zoom (i.e. *10000/zoom).
xOff+=dirX*10000/zoomX;
yOff+=dirY*10000/zoomY;

// Relative cellSize.
//if (cellStep>4)
//cellStep=1600000/zoomX;

for (let y=0;y<width;y+=cellStep-1){
for (let x=0;x<height;x+=cellStep-1){

let rad = 100;
let dx = (x-demiWidth)/zoomX-xOff;
let dy = (y-demiHeight)/zoomY-yOff;
let a = dx;
let b = dy;

for (let t=1;t<64;t++){
let d = (a*a)-(b*b)+dx;
b = 2*(a*b)+dy;
a = d;

let H = d>rad;
	
if (H){Atom(x,y,"rgb("+t*rMult+","+t*gMult+","+t*bMult+")");break;}

}
}
}
_dir=""; // So we don't stick to a steer direction.
} // render.

</script>